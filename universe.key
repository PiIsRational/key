
\predicates {
    owns(Object, Object);
    dominates(Object, Object);
    dominatesSet(Object, LocSet);
    undom(Object, Object);
}

\rules(programRules:Java) {
    // ---------------------------------------------------
    //    Ownership Rules
    // ---------------------------------------------------

    ownsSelf {
        \schemaVar \term Object o;

        \find(owns(o, o))
        
        \replacewith(false)
    };

    dominatesDef {
        \schemaVar \term Object x, y;
        \schemaVar \variables Object ov;

        \find(dominates(x, y))
        \varcond(\notFreeIn(ov, x, y))
        \replacewith(owns(x, y) | \exists ov; (owns(x, ov) & dominates(ov, y)))
    };

    peerOwn {
        \schemaVar \term Object x, y;

        \assumes(owns(y, x) ==>)
        \find(owns(x, y) ==>)
        \closegoal
    };


    undomDef {
        \schemaVar \term Object x, y;

        \find(undom(x, y))

        \replacewith(!dominates(x, y) & !dominates(y, x))
    };

    dominatesSetDef {
        \schemaVar \term LocSet s;
        \schemaVar \term Object x;
        \schemaVar \variables Object o;
        \schemaVar \variables Field f;

        \find(dominatesSet(x, s))

        \varcond(\notFreeIn(o, s, x), \notFreeIn(f, s, x))
        \replacewith(\forall o; (\forall f; (elementOf(o, f, s) -> dominates(x, o))))
    };

    dominatesSelf {
        \schemaVar \term Object o;

        \find(dominates(o, o))

        \replacewith(false)
    };

    singleOwner {
        \schemaVar \term Object x, y, z;

        \assumes(owns(z, y) ==>)
        \find(owns(x, y) ==>)

        \add(x = z ==>)
    };

    // These are the rules that should be derivable from the first rules

    peerDominate {
        \schemaVar \term Object x, y;

        \assumes(dominates(y, x) ==>)
        \find(dominates(x, y) ==>)
        \closegoal
    };

    dominatesSetEmpty {
        \schemaVar \term Object o;

        \find(dominatesSet(o, empty))

        \replacewith(true)
    };

    dominatesSetAllLocs {
        \schemaVar \term Object o;

        \find(dominatesSet(o, allLocs))

        \replacewith(false)
    };

    dominatesSetUnion {
        \schemaVar \term LocSet s1, s2;
        \schemaVar \term Object o;

        \find(dominatesSet(o, union(s1, s2)))

        \replacewith(dominatesSet(o, s1) & dominatesSet(o, s2))
    };

    dominatesSetSubset {
        \schemaVar \term LocSet s1, s2;
        \schemaVar \term Object o;

        \assumes(subset(s2, s1) ==>)
        \find(dominatesSet(o, s1) ==>)

        \add(dominatesSet(o, s2) ==>)
    };

    dominatesSetDisjoint {
        \schemaVar \term Object o1, o2;
        \schemaVar \term LocSet s1, s2;

        \assumes(dominatesSet(o1, s1), dominatesSet(o2, s2) ==>)
        \find(undom(o1, o2) ==>)
        \add(disjoint(s1, s2) ==>)
    };

    // rules to just get going
    anyOwns {
        \schemaVar \term Object o1, o2;
        \find(o1)
        \add(owns(o1, o2) ==>)
    };

    anyDominates {
        \schemaVar \term Object o1, o2;
        \find(o1)
        \add(dominates(o1, o2) ==>)
    };

    dominatesTransitive {
        \schemaVar \term Object x, y, z;
        \assumes(dominates(x, y), dominates(y, z) ==>)
        \add(dominates(x, z) ==>)
    };

    dominatesSetElement {
        \schemaVar \term LocSet s;
        \schemaVar \term Object x, o;
        \schemaVar \term Field f;

        \assumes(elementOf(o, f, s) ==>)
        \find(dominatesSet(x, s) ==>)

        \add(dominates(x, o) ==>)
    };

    anyDominatesSet {
        \schemaVar \term Object o;
        \schemaVar \term LocSet s;

        \find(o)
        \add(dominatesSet(o, s) ==>)
    };

    sameLevelUndom {
        \schemaVar \term Object o, x, y;

        \assumes(owns(o, x), owns(o, y) ==>)
        \find(==> x = y)

        \add(undom(x, y) ==>)
    };
}
